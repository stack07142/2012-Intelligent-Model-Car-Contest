/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : ADConv.h
**     Project   : SCC_02
**     Processor : MC9S12XEP100CAL
**     Component : ADC
**     Version   : Component 01.593, Driver 01.18, CPU db: 3.00.033
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2012-07-15, ¿ÀÀü 12:00
**     Abstract  :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings  :
**         AD control register         : ATD0CTL4    [$02C4]
**         Interrupt name              : Vatd0
**         Interrupt enable reg.       : ATD0CTL23   [$02C2]
**         Priority                    : 4
**         User handling procedure     : ADConv_OnEnd
**         Number of conversions       : 1
**         AD resolution               : 12-bit
**
**         Input pins
**
**              Port name              : AD0L
**              Bit number (in port)   : 0
**              Bit mask of the port   : $0001
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**              Port name              : AD0L
**              Bit number (in port)   : 1
**              Bit mask of the port   : $0002
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**              Port name              : AD0L
**              Bit number (in port)   : 2
**              Bit mask of the port   : $0004
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**              Port name              : AD0L
**              Bit number (in port)   : 3
**              Bit mask of the port   : $0008
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**              Port name              : AD0L
**              Bit number (in port)   : 4
**              Bit mask of the port   : $0010
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**              Port name              : AD0L
**              Bit number (in port)   : 5
**              Bit mask of the port   : $0020
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**              Port name              : AD0L
**              Bit number (in port)   : 6
**              Bit mask of the port   : $0040
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**              Port name              : AD0L
**              Bit number (in port)   : 7
**              Bit mask of the port   : $0080
**              Port data register     : PT1AD0      [$0271]
**              Port control register  : DDR1AD0     [$0273]
**
**         Initialization:
**              Conversion             : Enabled
**              Event                  : Enabled
**         High speed mode
**             Prescaler               : divide-by-20
**     Contents  :
**         Enable             - byte ADConv_Enable(void);
**         Disable            - byte ADConv_Disable(void);
**         EnableEvent        - byte ADConv_EnableEvent(void);
**         DisableEvent       - byte ADConv_DisableEvent(void);
**         MeasureChanNotWait - byte ADConv_MeasureChanNotWait(byte Channel);
**         GetChanValue8      - byte ADConv_GetChanValue8(byte Channel, byte *Value);
**         GetChanValue16     - byte ADConv_GetChanValue16(byte Channel, word *Value);
**
**     Copyright : 1997 - 2010 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __ADConv
#define __ADConv

/* MODULE ADConv. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PE_Timer.h"
#include "Cpu.h"

#pragma DATA_SEG ADConv_DATA           /* Select data segment "ADConv_DATA" */
#pragma CODE_SEG ADConv_CODE


extern volatile bool ADConv_EnEvent;   /* Enable/Disable events */

#define ADConv_EnableTrigger ADConv_EnableExtChanTrigger
/*
** ===================================================================
** The EnableTrigger method has been renamed to
** the EnableExtChanTrigger.
** This macro is here to keep project backward compatibility.
** ===================================================================
*/

#define ADConv_DisableTrigger ADConv_Stop
/*
** ===================================================================
** Now, the Stop method is used for disabling the trigger mode
** instead of the DisableTrigger.
** This macro is here to keep project backward compatibility.
** ===================================================================
*/

#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void ADConv_Interrupt(void);
#pragma CODE_SEG ADConv_CODE
/*
** ===================================================================
**     Method      :  ADConv_Interrupt (component ADC)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


byte ADConv_Enable(void);
/*
** ===================================================================
**     Method      :  ADConv_Enable (component ADC)
**
**     Description :
**         Enables A/D converter component. <Events> may be generated
**         (<DisableEvent>/<EnableEvent>). If possible, this method
**         switches on A/D converter device, voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte ADConv_Disable(void);
/*
** ===================================================================
**     Method      :  ADConv_Disable (component ADC)
**
**     Description :
**         Disables A/D converter component. No <events> will be generated.
**         If possible, this method switches off A/D converter device,
**         voltage reference, etc.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define ADConv_EnableEvent()\
                              (ADConv_EnEvent = TRUE , ERR_OK)
/*
** ===================================================================
**     Method      :  ADConv_EnableEvent (component ADC)
**
**     Description :
**         Enables the <events>.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define ADConv_DisableEvent() (ADConv_EnEvent = FALSE , ERR_OK)
/*
** ===================================================================
**     Method      :  ADConv_DisableEvent (component ADC)
**
**     Description :
**         Disables the <events>.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte ADConv_MeasureChanNotWait(byte Channel);
/*
** ===================================================================
**     Method      :  ADConv_MeasureChanNotWait (component ADC)
**
**     Description :
**         This method performs one measurement from one channel and
**         doesn't wait till the end of the measurement. (Note: If the
**         <number of conversions> is more than one the conversion of
**         A/D channels is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the component is set then this
**                           parameter is ignored, because the parameter
**                           is set inside this method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
**                           ERR_RANGE - Parameter "Channel" out of range
** ===================================================================
*/

byte ADConv_GetChanValue8(byte Channel,byte *Value);
/*
** ===================================================================
**     Method      :  ADConv_GetChanValue8 (component ADC)
**
**     Description :
**         This method returns the last measured value of required
**         channel justified to the left. Compared with <GetChanValue>
**         method this method returns more accurate result if the
**         <number of conversions> is greater than 1 and <AD resolution>
**         is less than 8 bits. In addition, the user code dependency
**         on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the component is set then this
**                           parameter is ignored.
**       * Value           - Pointer to the measured value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

byte ADConv_GetChanValue16(byte Channel,word *Value);
/*
** ===================================================================
**     Method      :  ADConv_GetChanValue16 (component ADC)
**
**     Description :
**         This method returns the last measured value of the required
**         channel justified to the left. Compared with <GetChanValue>
**         method this method returns more accurate result if the
**         <number of conversions> is greater than 1 and <AD resolution>
**         is less than 16 bits. In addition, the user code dependency
**         on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the component is set then this
**                           parameter is ignored.
**       * Value           - Pointer to the measured value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

void ADConv_Init(void);
/*
** ===================================================================
**     Method      :  ADConv_Init (component ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the component's 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma DATA_SEG DEFAULT               /* Select data segment "DEFAULT" */
#pragma CODE_SEG DEFAULT

/* END ADConv. */

#endif /* ifndef __ADConv */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.02 [04.44]
**     for the Freescale HCS12X series of microcontrollers.
**
** ###################################################################
*/
