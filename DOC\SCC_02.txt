=============================================================================
List of generated methods in project: SCC_02

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "LEDs"      (bean BitsIO)
   - LEDs_GetDir -Return selected direction.
   - LEDs_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - LEDs_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - LEDs_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then it 
                reads the input value of the pin and returns it. If the direction is [output] then it returns the last written 
                value (see <Safe mode> property for limitations).
   - LEDs_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is [input] 
                it saves the value to a memory or register, this value will be written to the pin after switching to the output 
                mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes 
                the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - LEDs_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. (Method 
                is available only if the Direction = _[output]_ or _[input/output]_).
   - LEDs_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, FALSE)].
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - LEDs_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!GetBit(Bit))
                ]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "Switchs"   (bean BitsIO)
   - Switchs_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - Switchs_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then 
                it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).

Module "ExtInt_Rising" (bean ExtInt)
   - ExtInt_Rising_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - ExtInt_Rising_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - ExtInt_Rising_GetVal -Returns the actual value of the input pin of the component.

Module "ExtInt_Falling" (bean ExtInt)
   - ExtInt_Falling_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - ExtInt_Falling_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - ExtInt_Falling_GetVal -Returns the actual value of the input pin of the component.

Module "IR_Emitter" (bean PWM)
   - IR_Emitter_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - IR_Emitter_Disable -This method disables the component - it stops the signal generation and events calling. When the timer 
                is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - IR_Emitter_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - 
                FF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities 
                and on the selected period.
   - IR_Emitter_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - IR_Emitter_SetValue -This method sets (set to "1" = "High") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> method) otherwise it returns the error code. <ClrValue> and <SetValue> 
                methods are used for setting the initial state.
   - IR_Emitter_ClrValue -This method clears (set to "0" = "Low") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> otherwise it returns the error code. <ClrValue> and <SetValue> methods 
                are used for setting the initial state.

Module "ADConv"    (bean ADC)
   - ADConv_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, 
                this method switches on A/D converter device, voltage reference, etc.
   - ADConv_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - ADConv_EnableEvent -Enables the <events>.
   - ADConv_DisableEvent -Disables the <events>.
   - ADConv_MeasureChanNotWait -This method performs one measurement from one channel and doesn't wait till the end of the 
                measurement. (Note: If the <number of conversions> is more than one the conversion of A/D channels is performed 
                specified number of times.)
   - ADConv_GetChanValue8 -This method returns the last measured value of required channel justified to the left. Compared with 
                <GetChanValue> method this method returns more accurate result if the <number of conversions> is greater than 1 
                and <AD resolution> is less than 8 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADConv_GetChanValue16 -This method returns the last measured value of the required channel justified to the left. Compared 
                with <GetChanValue> method this method returns more accurate result if the <number of conversions> is greater 
                than 1 and <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is 
                eliminated.

Module "Control_Timer" (bean TimerInt)
   - Control_Timer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Control_Timer_Disable -This method disables the component - it stops the timer. No events will be generated.
   - Control_Timer_EnableEvent -This method enables the events.
   - Control_Timer_DisableEvent -This method disables the events.

Module "Encoder_F" (bean PulseAccumulator)
   - Encoder_F_Enable -Enables the component.
   - Encoder_F_Disable -Disables the component.
   - Encoder_F_ResetCounter -This method resets the pulse accumulator counter (sets to zero).
   - Encoder_F_GetCounterValue -This method returns the content of the pulse accumulator counter.

Module "DC_F"      (bean PWM)
   - DC_F_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - DC_F_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - DC_F_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - DC_F_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - DC_F_SetValue -This method sets (set to "1" = "High") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> method) otherwise it returns the error code. <ClrValue> and <SetValue> 
                methods are used for setting the initial state.
   - DC_F_ClrValue -This method clears (set to "0" = "Low") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> otherwise it returns the error code. <ClrValue> and <SetValue> methods 
                are used for setting the initial state.

Module "DC_B"      (bean PWM)
   - DC_B_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - DC_B_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - DC_B_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - DC_B_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - DC_B_SetValue -This method sets (set to "1" = "High") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> method) otherwise it returns the error code. <ClrValue> and <SetValue> 
                methods are used for setting the initial state.
   - DC_B_ClrValue -This method clears (set to "0" = "Low") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> otherwise it returns the error code. <ClrValue> and <SetValue> methods 
                are used for setting the initial state.

Module "Servo"     (bean PWM)
   - Servo_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Servo_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - Servo_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Servo_SetValue -This method sets (set to "1" = "High") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> method) otherwise it returns the error code. <ClrValue> and <SetValue> 
                methods are used for setting the initial state.
   - Servo_ClrValue -This method clears (set to "0" = "Low") timer flip-flop output signal level. It allows to the user to 
                directly set the output pin value (=flip-flop state), and can set the signal polarity. This method only works 
                when the timer is disabled (<Disable> otherwise it returns the error code. <ClrValue> and <SetValue> methods 
                are used for setting the initial state.

Module "Encoder_Direction" (bean BitIO)
   - Encoder_Direction_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].

Module "DC_Direction_F" (bean BitIO)
   - DC_Direction_F_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - DC_Direction_F_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DC_Direction_F_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DC_Direction_F_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "DC_Direction_B" (bean BitIO)
   - DC_Direction_B_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - DC_Direction_B_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DC_Direction_B_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DC_Direction_B_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "LCDport"   (bean ByteIO)
   - LCDport_GetDir -Returns selected direction.
   - LCDport_GetVal -Returns the value of the Input/Output component. If the direction is [input] then it reads the input value 
                of the pins and returns it. If the direction is [output] then it returns the last written value (see <Safe 
                mode> property for limitations).
   - LCDport_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the port. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "SevenSEG_Data" (bean ByteIO)
   - SevenSEG_Data_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value 
                to a memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the port. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - SevenSEG_Data_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "SevenSEG_Signal" (bean BitsIO)
   - SevenSEG_Signal_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the 
                value to a memory or a register, this value will be written to the pins after switching to the output mode - 
                using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the 
                value to the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "US_echo_timer" (bean TimerInt)
   - US_echo_timer_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - US_echo_timer_Disable -This method disables the component - it stops the timer. No events will be generated.
   - US_echo_timer_EnableEvent -This method enables the events.
   - US_echo_timer_DisableEvent -This method disables the events.

Module "US0_echo"  (bean BitIO)
   - US0_echo_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "US0_trigger" (bean BitIO)
   - US0_trigger_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - US0_trigger_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "US1_echo"  (bean BitIO)
   - US1_echo_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "US1_trigger" (bean BitIO)
   - US1_trigger_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - US1_trigger_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "Encoder_B" (bean PulseAccumulator)
   - Encoder_B_Enable -Enables the component.
   - Encoder_B_Disable -Disables the component.
   - Encoder_B_ResetCounter -This method resets the pulse accumulator counter (sets to zero).
   - Encoder_B_GetCounterValue -This method returns the content of the pulse accumulator counter.

Module "US2_echo"  (bean BitIO)
   - US2_echo_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "US2_trigger" (bean BitIO)
   - US2_trigger_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - US2_trigger_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (bean MC9S12XEP100_112)
   - Cpu_EnableInt -Enable maskable interrupts
   - Cpu_DisableInt -Disable maskable interrupts
   - Cpu_SetWaitMode -Set low power mode - Wait mode.  For more information about the wait mode see documentation of this CPU.  
                Release from Wait mode: Reset or interrupt
   - Cpu_SetStopMode -Set low power mode - Stop mode.  For more information about the stop mode see documentation of this CPU.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
